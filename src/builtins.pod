=head0 Built-in types, operators and methods

=for authors

I'm not sure if this qualifies as a chapter on its own. I could imagine
putting this at the end of the first chapter, or squeeze the sections into
chapter 1 where appropriate.

=end for

X<type>
X<coercion>

Many operators work on a particular I<type> of data. If the type of the
operands differs from the type of the operand, Perl will make copies of the
operands and convert those to the needed types.  For example, C<$a + $b> will
convert a copy of both C<$a> and C<$b> to numbers (unless they are numbers
already). This implicit conversion is called I<coercion>.

Besides operators, other syntactic elements coerce their elements: C<if> and
C<while> coerce to truth values (bool), C<for> views things as lists, and so
on.

=for author

I've explained this as a form of context in the Modern Perl book; it may work
here too.

=end for

=head1 Numbers

Sometimes coercion is intuitively transparent.  PerlÂ 6 has several numeric
types which you can intermix freely.  For example, subtracting a floating point
value from an integer works, as in C<123 - 12.1e1>.

The most important types are:

=over

=item Int

X<Int>
X<types; Int>

C<Int> objects store integer numbers of arbitrary size. If you write a literal
that consists only of digits, such as C<12>, it is an C<Int>.

=item Rat

X<Rat>
X<rational type>
X<types; rational>
X<types; Rat>

C<Rat>, short for I<rational>, stores fractional numbers without loss of
precision.  Because C<Rat> tracks its numerator and denominator as integers,
mathmatical operations on C<Rat>s with large components can become quite slow.
For this reason, rationals with large denominators automatically degrade to
C<Num>.

Writing a fractional value with a dot as the decimal separator produces a
C<Rat>, for example C<3.14>.

=item Num

X<Num>
X<types; Num>

C<Num> is the floating point type. It stores sign, mantissa, and exponent, each
with a fixed width. Calculations involving C<Num> numbers are usually quite
fast, but subject to limited precision.

Numbers in scientific notation such as C<6.022e23> are of type C<Num>.

=item Complex

X<Complex>
X<types; Complex>

C<Complex> is the complex number type. Complex numbers have two parts to them:
a real part and in imaginary part. If either part is C<Nan>, then the entire
number may possibly be C<Nan>.

Numbers in the form C<a + bi> are of type C<Complex>.

=back

The following operators are available for all number types:

    Binary operators:
    Operator     Description
    **           Exponentation: $a**$b is $a to the power of $b
    *            multiplication
    /            division    
    div          integer division
    +            addition
    -            subtraction

    Unary operators:
    Operator     Description
    +            conversion to number
    -            negation

Most mathematical functions are available both as methods and functions, so
you can write both C<(-5).abs> and C<abs(-5)>.

    Method      Description
    abs         absolute value
    sqrt        square root
    log         natural logarithm
    log10       logarithm to base 10

    ceil        rounding up to an integer
    floor       rounding down to an integer
    round       rounding to next integer
    sign        -1 for negative, 0 for 0, 1 for positive values

X<trigonometric functions>
X<operators; trigonometry>
X<units>

=for author

Gradians?  Are these functions also methods?

=end for

The trigonometric functions C<sin>, C<cos>, C<tan>, C<asin>, C<acos>, C<atan>,
C<sec>, C<cosec>, C<cotan>, C<asec>, C<acosec>, C<acotan>, C<sinh>, C<cosh>,
C<tanh>, C<asinh>, C<acosh>, C<atanh>, C<sech>, C<cosech>, C<cotanh>, C<asech>,
C<acosech> and C<acotanh> are available, and work in units of radians by
default. You may specify the unit with an argument of C<Degrees>, C<Gradians> or
C<Circles>. For example, C<180.sin(Degrees)> is approximately C<0>.

=head1 Strings

X<strings>
X<Str>
X<types; Str>
X<Buf>
X<types; Buf>

Strings stored as C<Str> are sequences of characters, independent of character
encoding. The C<Buf> type is available for storing binary data. The C<encode>
method converts a C<Str> to C<Buf>. C<decode> goes the other direction.

The following operations are available for strings:


    Binary operators:
    Operator     Description
    ~            concatenation: 'a' ~ 'b' is 'ab'
    x            replication: 'a' x 2 is 'aa'

    Unary oerators:
    Operator     Description
    ~            conversion to string: ~1 becomes '1'

    Methods:
    .chomp       remove trailing newline
    .substr($start, $length)    extract a part of the string. $length defaults
                                to the rest of the string
    .chars       number of characters in the string
    .uc          upper case
    .lc          lower case
    .ucfirst     convert first character to upper case
    .lcfirst     convert first character to lower case
    .capitalize  convert the first character of each word to upper case, and
                 all other characters to lower case



=for author

TODO: Str and Buf operators, methods

=end for

=head1 Bool

X<Bool>
X<types; Bool>

A Boolean value is either C<True> or C<False>.  Any value can coerce to a
boolean in boolean context. The rules for deciding if a value is true or false
depends on the type of the value:

=over

=item Strings

Empty strings and C<"0"> evaluate to C<False>.  All other strings evaluate to
C<True>.

=item Numbers

All numbers except zero evaluate to C<True>.

=item Lists and Hashes

Container types such as lists and hashes evaluate to C<False> if they are
empty, and to C<True> if they contain at least one value.

=back

Constructs such as C<if> automatically evaluate their conditions in
boolean context. You can force an explicit boolean context by
putting a C<?> in front of an expression. The C<!> prefix negates
the boolean value.

=begin programlisting

    my $num = 5;

    # implicit boolean context
    if $num { say "True" }

    # explicit boolean context
    my $bool    = ?$num;

    # negated boolean context
    my $not_num = !$num;

=end programlisting
