=head0 Grammars

Grammars organize regexes, just like  classes organize methods. The following
example demonstrates how to parse JSON, a data exchange format already
introduced (L<multis>).

=begin programlisting

    # file lib/JSON/Tiny/Grammar.pm

    grammar JSON::Tiny::Grammar {
        rule TOP        { ^[ <object> | <array> ]$ }
        rule object     { '{' ~ '}' <pairlist>     }
        rule pairlist   { [ <pair> ** [ \, ]  ]?   }
        rule pair       { <string> ':' <value>     }
        rule array      { '[' ~ ']' [ <value> ** [ \, ] ]?  }

        proto token value { <...> };

        token value:sym<number> {
            '-'?
            [ 0 | <[1..9]> <[0..9]>* ]
            [ \. <[0..9]>+ ]?
            [ <[eE]> [\+|\-]? <[0..9]>+ ]?
        }

        token value:sym<true>    { <sym>    };
        token value:sym<false>   { <sym>    };
        token value:sym<null>    { <sym>    };
        token value:sym<object>  { <object> };
        token value:sym<array>   { <array>  };
        token value:sym<string>  { <string> }

        token string {
            \" ~ \" [ <str> | \\ <str_escape> ]*
        }

        token str {
            [
                <!before \t>
                <!before \n>
                <!before \\>
                <!before \">
                .
            ]+
        #    <-["\\\t\n]>+
        }

        token str_escape {
            <["\\/bfnrt]> | u <xdigit>**4
        }

    }


    # test it:
    my $tester = '{
        "country":  "Austria",
        "cities": [ "Wien", "Salzburg", "Innsbruck" ],
        "population": 8353243
    }';

    if JSON::Tiny::Grammar.parse($tester) {
        say "It's valid JSON";
    } else {
        # TODO: error reporting
        say "Not quite...";
    }

=end programlisting

A grammar contains various named regexes.  The call to
C<JSON::Tiny.parse($string)> starts by calling C<TOP>.

Regexes inside a grammar do not need a scope declarator, the default to the
same lookup semantics as methods in classes. The call to another regex
simplifies to C<< <regex_name> >>, which also creates a capture of the same
name.

Regexes inside a grammar do not need a scope declarator, the default to the
same lookup semantics as methods in classes. The call to another regex
simplifies to C<< <regex_name> >>, which also creates a capture of the same
name.

Rule C<TOP> anchors the match to the start and end of the string, so that the
whole string has to be in valid JSON format for the match to succeed. It then
either matches an C<< <array> >> or an C<< <object> >>.  Subsequent calls are
straightforward, and reflect the structure in which JSON components can
appear.

Regexes can be recursive.  An C<array> contains C<value>, and in turn a value
can be an C<array>. That won't cause any infinite loops as long as at least
one regex per recursive call consumes at least one character. If a set of
regexes were to call each other recursively without ever progressing in the
string, the recursion could go on infinitely, never progressing in the string
and never proceeding to other parts of the grammar.

X<goal matching>
X<~; regex meta character>

=for author

This paragraph is still unclear.

=end for

They only new regex syntax used in the C<JSON::Tiny> grammar is the I<goal
matching> syntax C<'{' ~ '}' [ ... ]>, which resembles C<'{' ...  '}'>, but
gives a better error message upon failure.  It sets the term to the right of
the tilde character as the goal, and then matches the final term C<[ ... ]>.
If the goal does not match, Perl will issue an error.

X<proto token>

Another novelty is the declaration of a I<proto token>:

=begin programlisting

    proto token value { <...> };

    token value:sym<number> {
        '-'?
        [ 0 | <[1..9]> <[0..9]>* ]
        [ \. <[0..9]>+ ]?
        [ <[eE]> [\+|\-]? <[0..9]>+ ]?
    }

    token value:sym<true>    { <sym>    };
    token value:sym<false>   { <sym>    };

=end programlisting

The C<proto token> syntax marks C<value> as a set of alternatives instead of a
single regex.  Each alternative has a name of the form C<< token
value:sym<thing> >>, which can read as I<< alternative of C<value> with
parameter C<sym> set to C<thing> >>.  The body of such an alternative is a
normal regex, where the call C<< <sym> >> matches the value of the parameter,
in this example C<thing>.

When calling the rule C<< <value> >>, the grammar engine attempts to match
every alternative (and can do so in parallel).  The longest match wins.

=head1 Grammar Inheritance

The similarity of grammars to classes goes deeper than storing regexes in a
namespace as a class might store methods--you can inherit from and extend
grammars, mix roles into them, and take advantage of polymorphism.  In fact, a
grammar is a class which by default inherits from C<Grammar> instead of
C<Any>.

Suppose you wante to enhance the JSON grammar to allow single-line C++ or
JavaScript comments. (These begin with C<//> and continue until the end of the
line.) The simplest enhancement is to allow such a comment in any place where
whitespace is valid.

=for author

The explanation of rules seems out of place here.  Can it move?  As well, this
paragraph was deeply confusing.  Here's my attempt to simplify.

=end for

Most of the grammar uses I<rules>, which as you may recall are like tokens
with the C<:sigspace> modifier enabled.  As this uses the C<ws> token to find
significant whitespace, the simplest approach is to override that token:

=begin programlisting

    grammar JSON::Tiny::Grammar::WithComments
        is JSON::Tiny::Grammar {

        token ws {
            \s* [ '//' \N* \n ]?
        }
    }

    my $tester = '{
        "country":  "Austria",
        "cities": [ "Wien", "Salzburg", "Innsbruck" ],
        "population": 8353243 // data from 2009-01
    }';

    if JSON::Tiny::Grammar::WithComments.parse($tester) {
        say "It's valid (modified) JSON";
    }

=end programlisting

The first two lines introduce a grammar that inherits from
C<JSON::Tiny::Grammar> through the use of the C<is> trait.  As subclasses
inherit methods from superclasses, so any grammar rule not present in the
derived grammar will come from its base grammar.

In this minimal JSON grammar, whitespace is never mandatory, so C<ws> can
match nothing at all. After optional spaces, two slashes C<'//'> introduce a
comment, after which must follow an arbitrary number of non-newline
characters, and then a newline. In prose, it extends to the rest of the line.

Inherited grammars may also add variants to proto tokens:

=begin programlisting

    grammar JSON::ExtendedNumeric is JSON::Tiny::Grammar  {
        token value:sym<nan> { <sym> }
        token value:sym<inf> { <[+-]>? <sym> }
    }

=end programlisting

In this, grammar a call to C<< <value> >> matches either one of the newly
added alternatives, or any of the old alternatives from the parent grammar
C<JSON::Tiny::Grammar>. Such extensibility is difficult to achieve with
ordinary, C<|> delimited alternatives.

=head1 Extracting data

X<reduction methods>
X<action methods>

The C<parse> method of a grammar returns a C<Match> object, through which you
can access all the relevant information of the match. If you were to do this
yourself, you'd have to write a function which traverses the match tree
recursively to find and to extract the interesting data.  An alternative
solution exists: I<reduction methods>, also called I<action methods>.

=begin programlisting

    class JSON::Tiny::Actions {
        method TOP($/)      { make $/.hash.values.[0].ast }
        method object($/)   { make $<pairlist>.ast.hash }
        method pairlist($/) { make $<pair>>>.ast }
        method pair($/)     { make $<string>.ast => $<value>.ast }
        method array($/)    { make [$<value>>>.ast] }
        method string($/)   { make join '', $/.caps>>.value>>.ast }

        # TODO: make that
        # make +$/
        # once prefix:<+> is sufficiently polymorphic
        method value:sym<number>($/) { make eval $/ }
        method value:sym<string>($/) { make $<string>.ast }
        method value:sym<true>  ($/) { make Bool::True  }
        method value:sym<false> ($/) { make Bool::False }
        method value:sym<null>  ($/) { make Any }
        method value:sym<object>($/) { make $<object>.ast }
        method value:sym<array> ($/) { make $<array>.ast }

        method str($/)               { make ~$/ }

        method str_escape($/) {
            if $<xdigit> {
                make chr(:16($<xdigit>.join));
            } else {
                my %h = '\\' => "\\",
                        'n'  => "\n",
                        't'  => "\t",
                        'f'  => "\f",
                        'r'  => "\r";
                make %h{$/};
            }
        }
    }

    my $actions = JSON::Tiny::Actions.new();
    JSON::Tiny::Grammar.parse($str, :$actions);

=end programlisting

This example passes an actions object to the grammar's C<parse> method.
Whenever the grammar engine finishes parsing one rule, it calls a method on
the actions object with the same name as the current rule. If no such method
exists, the grammar engine calls no method and moves along.

If a method does exist, the grammar engine passes the current match object as
a positional argument.

X<abstract syntax tree>

=for author

This doesn't really explain what an AST is--and isn't that specific to writing
compilers?

=end for

Each match object has a slot called C<ast> (short for I<abstract syntax tree>)
for a payload object.  This slot can hold a custom data structure that you
create from the action methods. Calling C<make $thing> in an action method
sets the C<ast> attribute of the current match object to C<$thing>.

In the case of the JSON parser, the payload can be the data structure that the
JSON string represents.

Although the rules and action methods live in different namespaces (and in a
real-world project probably even in separate files), here they are adjacent to
demonstrate their correspondence:

=begin programlisting

    rule TOP        { ^ [ <object> | <array> ]$ }
    method TOP($/)  { make $/.hash.values.[0].ast }

=end programlisting

# TODO: decide if $/.values could be sufficient

=for author

The C<make> explanation is fuzzy.  The rest of this chapter assumes some
implicit knowledge that readers likely won't have now.  The real insight for
me was realizing that transforming trees is the best way to write a compiler,
but I don't expect readers to have gone through the trouble of writing
compilers the hard way first.

=end for

The rule has an alternation with two branches, C<object> and C<array>.  Both
have a named capture.  When you view the match object as a hash through
C<$/.hash>, its only value is another match object--that of the subrule that
matched successfully. The action method takes the AST attached to that match
object and promotes it as its own AST by calling C<make>.

=begin programlisting

    rule object     { '{' ~ '}' <pairlist>  }
    method object($/)   { make $<pairlist>.ast.hash }

=end programlisting

The reduction method for C<object> extracts the AST of the C<pairlist>
submatch and turns it into a hash by calling its C<hash> method.

=begin programlisting

    rule pairlist   { [ <pair> ** [ \, ] ]? }
    # TODO: make that » once RT #75434 is resolved
    method pairlist($/) { make $<pair>>>.ast; }

=end programlisting

The C<pairlist> rule matches multiple comma-separted pairs.  The reduction
method calls the C<.ast> method on each matched pair and installs the result
list in its own AST.

=begin programlisting

    rule pair       { <string> ':' <value> }
    method pair($/) { make $<string>.ast => $<value>.ast }

=end programlisting

A pair consists of a string key and a value, so the action method constructs a
Perl 6 pair with the C<< => >> operator.

The other action methods work the same way. They transform the information
they extract from the match object into "native" Perl 6 data structures, and
call C<make> to set it as their own AST.

The action methods that belong to a proto token are parametric in the same way
as the alternative:

=begin programlisting

    token value:sym<null>        { <sym>    };
    method value:sym<null>($/)   { make Any }

    token value:sym<object>      { <object> };
    method value:sym<object>($/) { make $<object>.ast }

=end programlisting

When a C<< <value> >> call matches, the action method with the same
parametrization as the matching alternative executes.

=for vim: spell spelllang=en tw=78
