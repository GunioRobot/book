=head0 Subs and Signatures

X<subroutine>
X<arguments>
X<signature>
X<return value>

A I<subroutine> is a piece of code that performs a specific task. It may
operate on provided data, or I<arguments>, and may also produce results, or
I<return values>.  The I<signature> of a subroutine is a description of any
arguments it takes and any return values it produces.

The first chapter demonstrated simple subroutines.  In one sense, the operators
described in the second chapter are also subroutines that Perl 6 parses in
interesting ways.  However, they only scratch the surface of what's possible.

=head1 Declaring A Subroutine

X<subroutines; declaration>

A subroutine declaration consists of several parts.  First, the subroutine
declarator C<sub> indicates that you are starting a subroutine declaration.
Next may follow an optional name and signature.  The body of the sub follows;
this is a block of code enclosed in curly braces.  This is what will execute
every time the subroutine is called.

For example, in:

=begin programlisting

    sub panic() {
        say "Oh no! Something has gone most terribly wrong!";
    }

=end programlisting

... the name of the sub is C<panic>.  Its signature is empty.  Its body
consists of a single C<say> statement.

X<subroutines; scoping>
X<scoping; subroutines>

=for author

Link to exporting section.  Also, the description of scoping may be subtle
here.

=end for

By default, subroutines are lexically scoped, just like any variable declared
with C<my>. This means that--unless it is exported--a subroutine may only be
called within the scope in which it was declared.  Use the scope declarator
C<our> to make the subroutine available globally within the current package:

=begin programlisting

    {
        our sub eat() {
            say "om nom nom";
        }

        sub drink() {
            say "glug glug";
        }
    }

    eat();    # om nom nom
    drink();  # fails, can't drink outside of the block

=end programlisting

X<anonymous subroutines>
X<subroutines; anonymous>
X<subroutines; first-class>
X<first-class subroutines>

Perl 6 subroutines are objects. You can pass them around and store them in data
structures just as you can do with any other piece of data.  Programming
language designers often call these I<first-class subroutines>; they are as
fundamental and usable to the language as are hashes or arrays.

First-class subroutines are very useful to solve complex problems.  For
example, to make a little ASCII art dancing figure, you could build up a hash
where the keys are names of the dance moves, and the values are anonymous
subroutines:

=begin programlisting

    my $dance = '';
    my %moves =
        hands-over-head => sub { $dance ~= '/o\ '   },
        bird-arms       => sub { $dance ~= '|/o\| ' },
        left            => sub { $dance ~= '>o '    },
        right           => sub { $dance ~= 'o< '    },
        arms-up         => sub { $dance ~= '\o/ '   };

    my @awesome-dance = <arms-up bird-arms right hands-over-head>;

    for @awesome-dance -> $move {
        %moves{$move}.();
    }

    say $dance;

=end programlisting

From the output of this program, you can observe that doing the YMCA dance in
ASCII art looks just as bad as in real life.

=head1 Adding Signatures

X<parameter>
X<subroutines; signature>
X<signatures; subroutines>

A subroutine signature performs two roles. First, it declares the arguments
which callers may or must pass to the subroutine. Second, it declares the
variables in the subroutine to which the arguments are bound. These variables
are called I<parameters>.  Perl 6 signatures go further; they allow you to
constrain the values of arguments and to match against and extract parts of
complex data structures.

=head2 The Basics

In its simplest form, a signature is a comma separated list of variable names
to which incoming arguments are bound.

=begin programlisting

    sub order-beer($type, $pints) {
        say ($pints == 1 ?? 'A pint' !! "$pints pints") ~ " of $type, please."
    }

    order-beer('Hobgoblin', 1);    # A pint of Hobgoblin, please.
    order-beer('Zlatý Bažant', 3); # 3 pints of Zlatý Bažant, please.

=end programlisting

The use of the term I<bound> instead of I<assigned> is significant. The
variables in your signature are read-only references to the passed arguments.
You cannot modify them passed-in values within the subroutine.

If read-only binding is too limiting, you have two different ways to relax this
restriction.  A parameter marked C<is rw> means that you can modify the
passed argument within the subroutine.  Any modification modifies the original
in place.  If you attempt to pass a literal or some other constant value for an
C<rw> parameter, the binding will fail at the point of the call, with an
exception thrown:

=begin programlisting

    sub make-it-more-so($it is rw) {
        $it ~= substr($it, $it.chars - 1) x 5;
    }

    my $happy = "yay!";
    make-it-more-so($happy);
    say $happy;                # yay!!!!!!
    make-it-more-so("uh-oh");  # Fails; can't modify a constant

=end programlisting

If, instead, you want your own copy of the argument to work with inside the
subroutine--to leave the original untouched--mark the parameter C<is copy>:

=begin programlisting

    sub say-it-one-higher($it is copy) {
        $it++;
        say $it;
    }

    my $unanswer = 41;
    say-it-one-higher($unanswer);  # 42
    say-it-one-higher(41);         # 42

=end programlisting

The extra verbosity of marking parameters as mutable may seem excessive, but
it's likely you won't use these modifiers often.  While certain languages
require you to mark parameters as C<rw> to emulate returning multiple results
from a single subroutine, Perl allows you to return multiple values directly.

=head2 Passing Arrays, Hashes and Code

Sigils on variables indicate their intended use.  In a signature, a variable's
sigil acts as a constraint on the type of argument passed.  The C<@> sigil, for
example, checks that the passed value is C<Positional>.  Failing to pass
something that matches this constraint will cause the call to fail.

=begin programlisting

    sub shout-them(@words) {
        for @words -> $w {
            print uc("$w ");
        }
    }

    my @last_words = <do not want>;
    shout-them(@last_words);  # DO NOT WANT
    shout-them('help');       # Fails; a string is not iterable

=end programlisting

Similarly, the C<%> sigil implies that the caller must pass something that is
C<Associative>--that is, it allows indexing through the C<< <...> >> or
C<{...}> operations. The C<&> sigil requires that the caller pass something
callable, such as an anonymous subroutine. In that case, you may also call the
callable parameter without using the C<&> sigil:

=begin programlisting

    sub do-it-lots(&it, $how-many-times) {
        for 1..$how-many-times {
            it();
        }
    }

    do-it-lots(sub { say "Eating a stroopwafel" }, 10);

=end programlisting

A scalar (the C<$> sigil) implies no constraints.  Anything may bind to it,
even if it could bind to one of the other sigils.

=head2 Interpolating Arrays and Hashes

Sometimes you want to fill positional arguments from an array. Instead of
writing C<eat(@food[0], @food[1], @food[2], ...)> and so on, you can
I<flatten> them into the argument list by prepending a vertical bar:
C<eat(|@food)>.

Likewise, you can interpolate hashes into named arguments:

=begin programlisting

    my %user-preferences = ( from => 'Northern Sea' );
    order-shrimps(3, |%user-preferences)

=end programlisting

=head2 Optional Parameters

Some parameters can have sensible default values.  Sometimes, passing an
argument may be unnecessary.  In these cases, it is possible to mark such
parameters as optional, so those calling the subroutine can choose whether or
not to pass an argument.

Either assign a default value to the parameter in the signature:

=begin programlisting

    sub order-steak($how = 'medium') {
        say "I'd like a steak, $how";
    }

    order-steak();
    order-steak('well done');

=end programlisting

... or append a question mark to the parameter's name, in which case the
parameter bind to an undefined value if no argument is passed:

=begin programlisting

    sub order-burger($type, $side?) {
       say "I'd like a $type burger" ~
           ( defined($side) ?? " with a side of $side" !! "" );
    }

    order-burger("triple bacon", "deep fried onion rings");

=end programlisting

=head2 Named Parameters

When a subroutine has many parameters, it is sometimes hard to remember their
respective order. It is often easier to pass parameters by name instead.  Note
that when you do so, the order in which they appear as arguments does not
matter:

=begin programlisting

    sub order-beer($type, $pints) {
        say ($pints == 1 ?? 'A pint' !! "$pints pints") ~ " of $type, please."
    }

    order-beer(type => 'Hobgoblin', pints => 1);
    # A pint of Hobgoblin, please.

    order-beer(pints => 3, type => 'Zlatý Bažant');
    # 3 pints of Zlatý Bažant, please.

=end programlisting

You may also specify that an incoming argument may only fill a parameter when
passed by name, such that no positional argument may successfully bind to it.
To do this, precede the name of the parameter with a colon:

=begin programlisting

    sub order-shrimps($count, :$from = 'North Sea') {
        say "I'd like $count pieces of shrimp from the $from, please";
    }

    order-shrimps(6);                       # takes the default value 'North Sea'
    order-shrimps(4, from => 'Atlantic Ocean');
    order-shrimps(22, 'Mediterranean Sea'); # not allowed, :$from is named only

=end programlisting

Unlike positional parameters, named parameters are optional by default.  Adding
a C<!> at the end makes one mandatory.

=begin programlisting

    sub design-ice-cream-mixture(:$name!, $base = 'Vanilla', @mixins) {
        say "Creating a new recipe named $name!"
    }

    design-ice-cream-mixture(name => 'Plain');
    design-ice-cream-mixture(base => 'Strawberry chip'); # missing $name

=end programlisting

=head3 Renaming Parameters

Because you must use their names when passing named parameters, parameter names
are part of a subroutine's public API.  Choose them carefully!  Sometimes it
may be convenient to expose a parameter as having one name, but bind the
argument that is passed to a variable of a different name:

=begin programlisting

    sub announce-time(:dinner($supper) = '8pm') {
        say "We eat dinner at $supper";
    }

    announce-time(dinner => '9pm');      # We eat dinner at 9pm

=end programlisting

Parameters can also have multiple names. If some of your users are British and
others are Americans, you might write:

=begin programlisting

    sub paint-rectangle(
            :$x = 0,
            :$y = 0,
            :$width = 100,
            :$height = 50,
            :color(:colour($c))) {

       # print a piece of SVG that reprents a rectangle
       say qq[<rect x="$x" y="$y" width="$width" height="$height"
                     style="fill: $c" />]
    }

    # both calls work the same
    paint-rectangle :color<Blue>;
    paint-rectangle :colour<Blue>;

    # of course you can still fill the other options
    paint-rectangle :width(30), :height(10), :colour<Blue>;

=end programlisting

=head3 Alternative Named Argument Syntaxes

=for author

This section is confusing.  I've tried to clarify.

=end for

Named arguments are actually C<Pair>s (of keys and values).  There are multiple
ways to write C<Pair>s.  The difference between the approaches is primarily one
of clarity, as each alternative provides a different quoting mechanism.  These
three calls all mean the same thing:

=begin programlisting

    announce-time(dinner => '9pm');
    announce-time(:dinner('9pm'));
    announce-time(:dinner<9pm>);

=end programlisting

If you're only passing a boolean value, you don't even need the value portion
of the pair:

=begin programlisting

    toggle-blender( :enabled); # enables  the blender
    toggle-blender(:!enabled); # disables the blender

=end programlisting

A named argument of the form C<:name> with no value has an implicit value of
C<Bool::True>.  The negated form of this, C<:!name>, has an implicit value of
C<Bool::False>.

If you use a variable to create a pair, you can reuse the variable name as the
key of the pair.

=begin programlisting

    my $dinner = '9pm';
    announce-dinner :$dinner;  # same as dinner => $dinner;

=end programlisting

L<pair_forms> lists possible C<Pair> forms and their meanings.

=begin table C<Pair> forms and their meanings

Z<pair_forms>

=headrow

=row

=cell Shorthand

=cell Long form

=cell Description

=bodyrows

=row

=cell C<< :allowed >>

=cell C<< allowed => Bool::True >>

=cell Boolean flag

=row

=cell C<< :!allowed >>

=cell C<< allowed => Bool::False >>

=cell Boolean flag

=row

=cell C<< :bev<tea coffee> >>

=cell C<< bev => ('tee', 'coffee') >>

=cell List

=row

=cell C<< :times[1, 3] >>

=cell C<< times => [1, 3] >>

=cell Array

=row

=cell C<< :hash{ a => 2 } >>

=cell C<< hash => { a => 2} >>

=cell Hash

=row

=cell C<< :$var >>

=cell C<< var => $var >>

=cell Scalar variable

=row

=cell C<< :@var >>

=cell C<< var => @var >>

=cell Array variable

=row

=cell C<< :%var >>

=cell C<< var => %var >>

=cell Hash variable

=end table

You can use all of these forms in any context where you can use a C<Pair>
object. For example, when populating a hash:

=begin programlisting

    # TODO: better example
    my $black = 12;
    my %color-popularities = :$black, :blue(8),
                             red => 18, :white<0>;

=end programlisting

Finally, to pass an existing C<Pair> object to a subroutine by position, not
name, either put it in parentheses (like C<(:$thing)>), or use the C<< => >>
operator with a quoted string on the left-hand side: C<< "thing" => $thing >>.

=head2 Slurpy Parameters

X<slurpy>

In an earlier example the function C<shout-it> accepted an array argument.
However, this prevented users from passing in a single argument. You may like
to enable both possibilities, or to allow multiple positional arguments and
even multiple array arguments all of which will flatten into a single array
parameter in the subroutine. The I<slurpy> prefix (C<*>) before the parameter
name accomplishes this:

=begin programlisting

    sub shout-them(*@words) {
        for @words -> $w {
            print uc("$w ");
        }
    }

    # now you can pass items
    shout-them('go');           # GO
    shout-them('go', 'home');   # GO HOME

    my @words = ('go', 'home');
    shout-them(@words);         # still works

=end programlisting

A parameter preceded by an asterisk C<*> is known as a I<slurpy>. It stores
all remaining unbound positional arguments in an array.  Likewise, C<*%hash>
slurps all the remaining unbound named arguments into a hash.

Slurpy arrays and hashes allow you to pass all positional and named arguments
to another routine, for example:

=begin programlisting

    sub debug-wrapper(&code, *@positional, *%named) {
        warn "Calling '&code.name()' with arguments "
             ~ "@positional.perl(), %named.perl()\n";
        code(|@positional, |%named);
        warn "... back from '&code.name()'\n";
    }

    debug-wrapper(&order-shrimps, 4, from => 'Atlantic Ocean');

=end programlisting

=head1 Returning Results

Subroutines can also return values.  The ASCII art dancing subroutine example
from earlier in this chapter, subroutines are simpler when they each return a
new string for their callers to use:

=begin programlisting

    my %moves =
       hands-over-head => sub { return '/o\ '   },
       bird-arms       => sub { return '|/o\| ' },
       left            => sub { return '>o '    },
       right           => sub { return 'o< '    },
       arms-up         => sub { return '\o/ '   };

    my @awesome-dance = <arms-up bird-arms right hands-over-head>;
    for @awesome-dance -> $move {
        print %moves{$move}.();
    }
    print "\n";

=end programlisting

A Perl subroutine can return multiple values:

=begin programlisting

    sub menu {
        if rand < 0.5 {
            return ('fish', 'white wine')
        } else {
            return ('steak', 'red wine');
        }
    }

    my ($food, $beverage) = menu();

=end programlisting

X<return>

Even C<return> itself is not necessary.  If you exclude it, Perl will return
the value produced by the last statement run inside the subroutine.  This
simplifies the previous example:

=begin programlisting

    sub menu {
        if rand < 0.5 {
            'fish', 'white wine'
        } else {
            'steak', 'red wine';
        }
    }

    my ($food, $beverage) = menu();

=end programlisting

X<return; implicit>

Be wary of relying on this, however: when the flow of control within a
subroutine is sufficiently complex, adding an explicit C<return> will clarify
the code. As a general rule, only the simplest subroutines benefit from
implicit C<return>.

C<return> has the additional effect of immediately exiting the subroutine:

=begin programlisting

    sub create-world(*%characteristics) {
        my $world = World.new(%characteristics);
        return $world if %characteristics<temporary>;

        save-world($world);
    }

=end programlisting

... and you'd better not misplace your new C<$world> if it's temporary, as it's
the only one you're going to get.

=head1 Working With Types

Many subroutines cannot meaningfully work with arbitrary parameters, but
require that the parameters support certain methods or have other properties.

If that is the case, it makes sense to restrict the types of parameters, such
that attempts to pass incorrect values as arguments will cause Perl to raise an
error at the time of calling the subroutine.

=head2 Basic Types

X<constraint; type>
X<parameter type constraint>

The easiest way to restrict the possible values that a subroutine accepts is by
writing a type name in front of a parameter.  For example, a subroutine that
performs numeric calculations on its parameters could require that its
arguments are of the type C<Numeric>:

=begin programlisting

    sub mean(Numeric $a, Numeric $b) {
        return ($a + $b) / 2;
    }

    say mean 2.5, 1.5;
    say mean 'some', 'strings';

=end programlisting

This produces this output:

=begin screen

    2
    Nominal type check failed for parameter '$a'; expected Numeric but got Str instead

=end screen

If multiple parameters have type constraints, each argument has to fulfill the
type constraint of the parameter to which it binds.

=head2 Adding Constraints

X<constraint>

Sometimes a type name is not enough to sufficiently describe the requirements
for an argument. In this case, you may add an additional I<constraint> to the
parameter with a C<where> block:

=begin programlisting

    sub circle-radius-from-area(Numeric $area where { $area >= 0 }) {
        ($area / pi).sqrt
    }
    say circle-radius-from-area(3);    # OK
    say circle-radius-from-area(-3);   # Error

=end programlisting

Because the calculation is meaningful only for non-negative area values, the
parameter includes a constraint which returns C<True> for non-negative values.
If this constraint returns a false value, the type check will fail at the time
the routine is called.

The block after the C<where> is not required; Perl performs the check by smart
matching the argument against whatever follows the C<where>. Therefore, it is
possible to accept arguments in a certain range by just writing:

=begin programlisting

    sub set-volume(Numeric $volume where 0..11) {
        say "Turning it up to $volume";
    }

=end programlisting

To constrain arguments to those existing as keys of a hash:

=begin programlisting

    my %in-stock = 'Staropramen' => 8, 'Mori' => 5, 'La Trappe' => 9;

    sub order-beer(Str $name where %in-stock) {
        say "Here's your $name";
        %in-stock{$name}--;
        if %in-stock{$name} == 0 {
            say "OH NO! That was the last $name, folks! :'(";
            %in-stock.delete($name);
        }
    }

=end programlisting

=head1 Captures

X<captures>
X<Capture>

In one sense, a signature is a collection of parameters. Captures fill the same
niche for arguments. Just as you rarely think of a signature as a
whole--instead focusing on individual parameters--you rarely have to think
about captures.  When you do, Perl 6 allows you to manipulate captures
directly.

Captures have both positional and named parts, which act like a list and a hash
respectively. The list-like part contains positional parameters and the
hash-like part contains named parameters.

=head2 Creating And Using A Capture

To build a capture, use the C<\(...)> syntax. Like arrays and hashes, you can
interpolate a capture into an argument by using C<|>:

=begin programlisting

    sub act($left, $right, :$action) {
        $action($left, $right);
    }

    my @tasks = \(39, 3, action => { say $^a + $^b }),
                \(6, 7, action => { say $^a * $^b });

    for @tasks -> $task-args {
        act(|$task-args);
    }

=end programlisting

This program creates an array of captures, each of which contains two
positional arguments and one named argument. It then iterates over the array,
making a call to C<act> with each argument set. The power here is that Perl 6
allows you to specificy of the arguments for a call and the call itself
separately, so as to apply the same arguments over many calls, or the same call
to many sets of arguments. Significantly, the code that performs the
application need not know whether any of the arguments are named or positional.

A deeper difference is that captures work like references. If a variable is
mentioned in a capture, then the capture contains not just the value, as would
happen in a list assignment, but instead a reference to the variable. Thus
C<rw> parameters still work with captures involved.

=begin programlisting

    my $value     = 7;
    my $to-change = \($value);

    sub double($x is rw) {
        $x *= 2;
    }

    sub triple($x is rw) {
        $x *= 3;
    }

    triple(|$to-change);
    double(|$to-change);

    say $value; # 42

=end programlisting

Perl types with both positional and named parts also show up in various other
situations. For example, regex matches have both positional and named
matches--C<Match> objects themselves are a type of capture. It's also possible
to conceive of an XML node type that is a type of capture, where attributes are
named and child nodes are positional.  Binding this node to a function could
use the appropriate parameter syntax to work with various children and
attributes.

=head2 Captures In Signatures

All calls build a capture on the caller side and unpack it according to the
signature on the callee side.  It is also possible to write a signature that
binds the capture itself into a variable. This is especially useful for writing
routines that delegate to other routines with the same arguments.

=begin sidebar

An optimizing Perl 6 compiler may, of course, be able to optimize away building
the capture data structure every call if it statically knows what is going to
be called.

=end sidebar

=begin programlisting

    sub visit-czechoslovakia(|$plan) {
        warn "Sorry, this country has been deprecated.";
        visit-slovakia(|$plan);
        visit-czech-republic(|$plan);
    }

=end programlisting

The benefit of using this over a signature like C<:(*@pos, *%named)> is that
these both enforce some context on the arguments, which may be premature. For
example, if the caller passes two arrays, they would flatten into C<@pos>. This
means that the two nested arrays could not be recovered at the point of
delegation. A capture preserves the two array arguments, so that the final
callee's signature may determine how to bind them.

=head1 Unpacking

Sometimes you need to work with only part of an array or a hash.  You can do
that with ordinary slicing access, or you can use signature binding:

=begin programlisting

    sub first-is-largest(@a) {
        my $first = @a.shift;
        # TODO: either explain junctions, or find a
        # concise way to write without them
        return $first >= all(@a);
    }

    # same thing:
    sub first-is-largest(@a) {
        my :($first, *@rest) := \(|@a)
        return $first >= all(@rest);
    }

=end programlisting

The signature binding approach might seem clumsy, but when you use it in the
main signature of a subroutine, you get tremendous power:

=begin programlisting

    sub first-is-largest([$first, *@rest]) {
        return $first >= all(@rest);
    }

=end programlisting

X<unpacking>
X<signature unpacking>
X<subsignature>

The brackets in the signature tell the compiler to expect a list-like argument.
Instead of binding to an array parameter, it instead gets I<unpacked> into
several parameters--in this case, a scalar for the first element and an array
for the rest.  This I<subsignature> also acts as a constraint on the array
parameter: the signature binding will fail unless the list in the capture
contains at least one item.

Likewise you can unpack a hash by using C<%(...)> instead of square brackets,
but you must access named parameters instead of positional.

=for author

Is this a little too cute?

=end for

=begin programlisting

    sub create-world(%(:$temporary, *%characteristics)) {
        my $world = World.new(%characteristics);
        return $world if $temporary;

        save-world($world);
    }

=end programlisting

# TODO: come up with a good example

# TODO: generic object unpacking

=head1 Currying

Consider a module that provided the example from the "Optional Parameters" section:

=begin programlisting

    sub order-burger( $type, $side? ) { ... };

=end programlisting

If you used order-burger repeatedly, but often with a side of french fries, you
might wish that the author had also provided a "order-burger-and-fries" sub.

You could easily write it yourself:

=begin programlisting

    sub order-burger-and-fries ( $type ) {
        order-burger( $type, side => 'french fries' );
    }

=end programlisting

If your personal order is always vegetarian, you might instead wish for a
"order-the-usual" sub. This is less concise to write, due to the second
parameter being optional:

=begin programlisting

    sub order-the-usual ( $side? ) {
        if ( $side.defined ) {
            order-burger( 'veggie', $side );
        }
        else {
            order-burger( 'veggie' );
        }
    }

=end programlisting

Currying gives you a shortcut for these exact cases; it creates a new sub from
an existing sub, with parameters already filled in. In Perl 6, we curry by
using the .assuming method.

=begin programlisting

    &order-the-usual        := &order-burger.assuming( 'veggie' );
    &order-burger-and-fries := &order-burger.assuming( side => 'french fries' );

=end programlisting

The new sub is like any other sub, and works with all the various
parameter-passing schemes already described.

=begin programlisting

    order-the-usual( 'salsa' );
    order-the-usual( side => 'broccoli' );

    order-burger-and-fries( 'plain' );
    order-burger-and-fries( :type<<double-beef>> );

=end programlisting

=head1 Introspection

Subroutines and their signatures are objects like any other. You can not only
call them, but also learn things about them, including exaimining the details
of their parameters:

=begin programlisting

    sub logarithm(Numeric $x, Numeric :$base = exp(1)) {
        log($x) / log($base);
    }

    my @params = &logarithm.signature.params;
    say @params.elems, ' parameters';

    for @params {
        say "Name:       ", .name;
        say "  Type:     ", .type;
        say "  named?    ", .named    ?? 'yes' !! 'no';
        say "  slurpy?   ", .slurpy   ?? 'yes' !! 'no';
        say "  optional? ", .optional ?? 'yes' !! 'no';
    }

=end programlisting

=begin screen

    2 parameters
    Name:       $x
      Type:     Numeric()
      named?    no
      slurpy?   no
      optional? no
    Name:       $base
      Type:     Numeric()
      named?    yes
      slurpy?   no
      optional? yes

=end screen

The C<&> sigil followed by a subroutine name gets the object representing that
subroutine rather than calling it. C<&logarithm.signature> returns the
signature associated with the subroutine, and calling C<.params> on the
signature returns a list of C<Parameter> objects. Each of these objects
describes one parameter in detail.

=begin table Methods in the Parameter class

# stolen straight from S06, adapted a bit

=headrow

=row

=cell method

=cell description

=bodyrows

=row

=cell name

=cell The name of the lexical variable to bind to, if any

=row

=cell type

=cell The nominal type

=row

=cell constraints

=cell Any further type constraints

=row

=cell readonly

=cell True if the parameter has C<is readonly> trait

=row

=cell rw

=cell True if the parameter has C<is rw> trait

=row

=cell copy

=cell True if the parameter has C<is copy> trait

=row

=cell named

=cell True if the parameter is to be passed by name

=row

=cell named_names

=cell List of names a named parameter can be passed as

=row

=cell slurpy

=cell True if the parameter is slurpy

=row

=cell optional

=cell True if the parameter is optional

=row

=cell default

=cell A closure returning the default value

=row

=cell signature

=cell A nested signature to bind the argument against

=end table

# TODO: talk about &signature.cando once that's implemented

Being able to introspect signatures enables building interfaces that can obtain
and then pass the right data to a subroutine. For example, you could build a
web form generator that knew how to get input from a user, validate it and then
call a routine with it based upon the information obtained through
introspection.  A similar approach might generate a command line interface
along with some basic usage instructions.

=for author

Link to traits section.

=end for

Beyond this, traits (L<traits>) allow you to associate extra data with
parameters.  This metadata can go far beyond that which subroutines,
signatures, and parameters normally provide.

=for editor vim: se spell
